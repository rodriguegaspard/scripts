#!/bin/sh
# Clipboard manager, saves strings in a file (and asks for a tag to sort it correctly), and performs several actions on then at the user request (save to clipboard, save to local playlist, save locally, open). Requires dmenu. 

# FILE SYNTAX
# Clipboards and playlists are simple txt files. Each line represents an item.
# For clipboards, each item is preceded by a tag.
# For playlists, no tag system, only one item per line.

set -e

# CONFIG
VIDEO_PROGRAM=mpv
IMAGE_PROGRAM=feh
PDF_PROGRAM=zathura
CLIPBOARDS_DIR=$HOME/.local/share/omniclip/clipboards
PLAYLISTS_DIR=$HOME/.local/share/omniclip/playlists
DOWNLOAD_DIR=$HOME/downloads

if [ ! -d "$CLIPBOARDS_DIR" ]; then
  mkdir -p "$CLIPBOARDS_DIR"
fi

if [ ! -d "$PLAYLISTS_DIR" ]; then
  mkdir -p "$PLAYLISTS_DIR"
fi

create(){
  FILENAME=$(echo "" | dmenu -p "Name for new $2:")
  touch $1/"$FILENAME".txt
  echo $1/"$FILENAME".txt
}

browse_files(){
  if [[ -z $(ls "$1") ]]; then
    echo $(create $1 $2)
  else
    FILE=$(ls "$1" | tr -s "\n" | sed "s/.txt//" | sort -u | dmenu -p "Choose a $2 to browse, or create a new one by giving it a name:")
    if ! ls "$1" | grep -q "$FILE" ; then
      touch "$1"/"$FILE".txt
    fi
    echo "$1"/"$FILE".txt
  fi
}

select_item(){
  FILE="$1"/$(ls "$1" | tr -s "\n" | sed "s/.txt//" | sort -u | dmenu -p "Choose a $2 to browse:").txt
  if [[ -z $(cat "$FILE") ]]; then
    notify-send -u critical -t 2000 "ERROR: No items in the current file"
    exit 1
  fi
  TAG=$(cat $FILE | tr -s '\n' |  cut -d " " -f 1 | sort -u | dmenu -p "Choose a tag to browse:")
  cat "$FILE" | grep "$TAG" | cut -d " " -f 2- | dmenu
}

copy(){
  echo "$1" | sed -z "s/\n//g" | xclip -selection primary
  echo "$1" | sed -z "s/\n//g" | xclip -selection clipboard
  notify-send -u normal -t 2000 "Copied $1 into the clipboard"
}

delete_item(){
  exit 1
}

delete_file(){
  exit 1
}

insert(){
  CHOICE=$(printf "Clipboard\nPlaylist" | tr -s '\n' | dmenu -p "Where to insert?")
  case "$CHOICE" in
    "Clipboard") 
      # Reprompts the user if the tag contains spaces, in the future let the delimiter be specific in the config
      FILE=$(browse_files "$CLIPBOARDS_DIR" "clipboard")
      while
        TAG=$(cat $FILE | tr -s '\n' |  cut -d " " -f 1 | sort -u | dmenu -p "Choose a tag, or create a new one, for the item:")
        [[ -z $TAG || $TAG == *" "* ]]
      do notify-send -u critical -t 2000 "ERROR: The tag must not be empty or contain spaces"; done
      echo "$TAG $1" >> "$FILE"
      ;;
    "Playlist") 
      FILE=$(browse_files "$PLAYLISTS_DIR" "playlist")
      echo "$1" >> "$FILE"
      ;;
    *) exit 0
      ;;
  esac
}

read_playlist(){
  FILE=$(browse_files $PLAYLISTS_DIR "playlist")
  if [ -z $(cat "$FILE") ]; then
    notify-send -u critical -t 2000 "ERROR: Playlist is empty"
  else
    while IFS= read -r line; do
      open $line
      sed -i 1d $FILE
    done < "$FILE"
  fi
  if [ -z $(cat "$FILE") ]; then
    rm $FILE
  fi
}

move(){
  exit 1
}

open(){
  if echo "$1" | grep -E '.*\.webm.*|.*\.mkv.*|.*\.gif.*|.*\.mp4.*|.*youtube\.com/watch.*|.*youtube\.com/live.*|.*youtube\.com/playlist.*|.*youtube\.com/shorts.*|.*youtu\.be.*|.*odysee\.com.*|.*twitch\.tv.*'; then
    $VIDEO_PROGRAM "$1" >/dev/null 2>&1 
  elif echo "$1" | grep -E '.*\.png.*|.*\.jpg.*|.*\.jpeg.*|.*\.webp.*'; then
    curl -sL "$1" > "/tmp/$(echo "$1" | sed "s/.*\///;s/%20/ /g")" && "$IMAGE_PROGRAM" "/tmp/$(echo "$1" | sed "s/.*\///;s/%20/ /g")"  >/dev/null 2>&1 &
  elif echo "$1" | grep -E '.*\.pdf.*|.*\.cbz.*|.*\.cbr.*|.*\.epub.*|.*\.mobi.*'; then
    curl -sL "$1" > "/tmp/$(echo "$1" | sed "s/.*\///;s/%20/ /g")" && "$PDF_PROGRAM" "/tmp/$(echo "$1" | sed "s/.*\///;s/%20/ /g")"  >/dev/null 2>&1 &
  elif echo "$1" | grep -E '.*\.mp3.*|.*\.aac.*|.*\.opus.*|.*\.flac.*'; then
    "$VIDEO_PROGRAM" "$1" >/dev/null 2>&1
  elif echo "$1" | grep -E '.*x\.com.*'; then
    "$BROWSER" $(echo "$1" | sed 's/x.com/nitter.poast.org/g')
  else
    "$BROWSER" "$1" || notify-send -u critical -t 2000 "ERROR: Could not read $1"
  fi
}

audio_extractor(){
  FILENAME="audio_$(date +%s)"
  if echo "$1" | grep -E '.*\.mp3.*|.*\.aac.*|.*\.opus.*|.*\.flac.*|.*\.wav'; then
    wget -P "$DOWNLOAD_DIR" "$1" >/dev/null  && notify-send -u normal -t 2000 "Audio file successfully downloaded"
  elif yt-dlp -o "$DOWNLOAD_DIR/$FILENAME.%(ext)s" -f bestaudio "$1" >/dev/null; then
    notify-send -u normal -t 2000 "Audio file successfully downloaded"
  else
    notify-send -u critical -t 2000 "ERROR: Audio file $1 could not be downloaded"
  fi
}

video_extractor(){
  FILENAME="video_$(date +%s)"
  if echo "$1" | grep -E '.*\.webm.*|.*\.mkv.*|.*\.gif.*|.*\.mp4.*'; then
    wget -P "$DOWNLOAD_DIR" "$1" >/dev/null && notify-send -u normal -t 2000 "Video file successfully downloaded"
  elif yt-dlp -o "$DOWNLOAD_DIR/$FILENAME.%(exts)s" -f bestvideo+bestaudio "$1" >/dev/null; then
    notify-send -u normal -t 2000 "Video file successfully downloaded using yt-dlp"
  else
    notify-send -u critical -t 2000 "ERROR: Video file $1 could not be downloaded"
  fi
}

image_extractor(){
  FILENAME="image_$(date +%s).png"
  setsid -f wget $1 -O - | magick - $NAME || notify-send -u critical -t 2000 "ERROR: Image file $1 could not be downloaded"
}

download(){
  PRESET_LIST="Standard\nAudio\nVideo\nImage"
  PRESET=$(printf $PRESET_LIST | tr -s '\n' |  cut -d " " -f 1 | dmenu -p "Select download preset")
  case "$PRESET" in
    "Standard") wget -P "$DOWNLOAD_DIR" "$1" >/dev/null
      ;;
    "Audio") audio_extractor $1
      ;;
    "Video") video_extractor $1
      ;;
    "Picture") image_extractor $1
      ;;
    *) notify-send -u critical -t 2000 "ERROR: Preset does not exist"
      ;;
  esac
}

get_clipboard(){
  if [ -z "$(xclip -o -sel clip)" ]
  then
    if [ -z "$(xclip -o)" ]
    then
      notify-send -t 2000 -u critical "ERROR" "No items found on clipboard" && exit 1
    else
      item="$(xclip -o)"
    fi
  else
    item="$(xclip -o -sel clip)"
  fi
  echo $item
}

actions_general_mode(){
  TRUNCATED_STRING=$([[ ${#1} -gt 20 ]] && echo "${1:0:18}.." || echo "$1")
  ACTION=$(printf "Open\nSave\nDownload" | tr -s '\n' | dmenu -p "Which action would you like to perform for item $TRUNCATED_STRING?")
  case "$ACTION" in
    "Open") open "$1"
      ;;
    "Save") insert "$1"
      ;;
    "Download") download "$1"
      ;;
    *) exit 0
      ;;
  esac
}

actions_browse(){
  CHOICE=$(printf "Clipboard\nPlaylist" | tr -s '\n' | dmenu -p "Which item to browse?")
  case "$CHOICE" in
    "Clipboard") 
      actions_browse_clipboard
      ;;
    "Playlist")
      read_playlist
      ;;
    *) exit 0
      ;;
  esac
}

actions_browse_clipboard(){
  ITEM=$(select_item $CLIPBOARDS_DIR "clipboard")
  ACTION=$(printf "Copy\nOpen\nDownload" | tr -s '\n' | dmenu -p "Which action would you like to perform?")
  case "$ACTION" in
    "Copy") copy "$ITEM"
      ;;
    "Open") open "$ITEM"
      ;;
    "Download") download "$ITEM"
      ;;
    *) exit 0
      ;;
  esac
}

usage(){
  printf "omniclip [-gbiodh]
  -g: general mode. prompts user for save, open, download or play the item currently in the system clipboard.
  -b: browse mode. prompts user for either a clipboard or a playlist, and then for the action to perform.
  -i: quick insert a new item taken from the clipboard into a local clipboard or playlist.
  -o: quick open an item from a local clipboard or playlist. 
  -d: quick download an item from a local clipboard or playlist.
  -I: quick insert a new item given as first argument into a local clipboard or playlist.
  -O: quick open an item given as first argument. 
  -D: quick download an item given as first argument
  -h: prints this help section."
}

while getopts 'gbiodIODh' flag; do
  case "${flag}" in
    g) actions_general_mode "$(get_clipboard)" ;;
    b) actions_browse ;;
    i) insert "$(get_clipboard)" ;;
    o) open "$(get_clipboard)" ;;
    d) download "$(get_clipboard)" ;;
    I) insert "$2" ;;
    O) open "$2" ;;
    D) download "$2" ;;
    h) usage ;;
    *) exit 1 ;;
  esac
done
